[
  {
    "objectID": "posts/best-kentucky-player-in-the-nba/index.html",
    "href": "posts/best-kentucky-player-in-the-nba/index.html",
    "title": "Who is the best NBA basketball player from Kentucky right now?",
    "section": "",
    "text": "Kentucky basketball is known for breeding players into the NBA. They usually always have players drafted every year and have high lottery picks. In addition, their recruiting strategy and pitch is to prepare players for the NBA and the NBA draft and that’s how they attract top high school recruits.\nWith that, there are 26 current Kentucky players on NBA rosters, and I will prove who is the best Kentucky player right now. I will only be looking at 2022-2023 statistics, so we can find the best player playing right now.\nThis isn’t as obvious an answer as you think because there are a lot of Kentucky NBA all-stars like Devin Booker, Anthony Davis, Bam Adebayo, and so many others.\n\n\nCode\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(ggrepel)\nlibrary(cowplot)\nlibrary(gt)\nlibrary(ggalt)\n\nnba36 <- read_csv(\"NBA36\")\nkynba36 <- nba36 %>% \n  filter(\n    Player == \"Bam Adebayo\" |\n    Player == \"Devin Booker\" |\n    Player == \"Brandon Boston Jr.\" |\n    Player == \"Anthony Davis\" |\n    Player == \"Hamidou Diallo\" |\n    Player == \"De'Aaron Fox\" |\n    Player == \"Wenyen Gabriel\" |\n    Player == \"Shai Gilgeous-Alexander\" |\n    Player == \"Tyler Herro\" |\n    Player == \"Isaiah Jackson\" |\n    Player == \"Keldon Johnson\" |\n    Player == \"Kevin Knox\" |\n    Player == \"Trey Lyles\" |\n    Player == \"Tyrese Maxey\" |\n    Player == \"Malik Monk\" |\n    Player == \"Jamal Murray\" |\n    Player == \"Nerlens Noel\" |\n    Player == \"Immanuel Quickley\" |\n    Player == \"Julius Randle\" |\n    Player == \"Nick Richards\" |\n    Player == \"Shaedon Sharpe\" |\n    Player == \"Karl-Anthony Towns\" |\n    Player == \"Jarred Vanderbilt\" |\n    Player == \"John Wall\" |\n    Player == \"TyTy Washington Jr.\" |\n    Player == \"P.J. Washington\")\n\nnba100 <- read_csv(\"nba100\")\nkynba100 <- nba100 %>% \n  filter(\n    Player == \"Bam Adebayo\" |\n    Player == \"Devin Booker\" |\n    Player == \"Brandon Boston Jr.\" |\n    Player == \"Anthony Davis\" |\n    Player == \"Hamidou Diallo\" |\n    Player == \"De'Aaron Fox\" |\n    Player == \"Wenyen Gabriel\" |\n    Player == \"Shai Gilgeous-Alexander\" |\n    Player == \"Tyler Herro\" |\n    Player == \"Isaiah Jackson\" |\n    Player == \"Keldon Johnson\" |\n    Player == \"Kevin Knox\" |\n    Player == \"Trey Lyles\" |\n    Player == \"Tyrese Maxey\" |\n    Player == \"Malik Monk\" |\n    Player == \"Jamal Murray\" |\n    Player == \"Nerlens Noel\" |\n    Player == \"Immanuel Quickley\" |\n    Player == \"Julius Randle\" |\n    Player == \"Nick Richards\" |\n    Player == \"Shaedon Sharpe\" |\n    Player == \"Karl-Anthony Towns\" |\n    Player == \"Jarred Vanderbilt\" |\n    Player == \"John Wall\" |\n    Player == \"TyTy Washington Jr.\" |\n    Player == \"P.J. Washington\")\n\nnbaadvanced <- read_csv(\"nbaadvanced\")\nkynbaadvanced <- nbaadvanced %>% \n  filter(\n    Player == \"Bam Adebayo\" |\n    Player == \"Devin Booker\" |\n    Player == \"Brandon Boston Jr.\" |\n    Player == \"Anthony Davis\" |\n    Player == \"Hamidou Diallo\" |\n    Player == \"De'Aaron Fox\" |\n    Player == \"Wenyen Gabriel\" |\n    Player == \"Shai Gilgeous-Alexander\" |\n    Player == \"Tyler Herro\" |\n    Player == \"Isaiah Jackson\" |\n    Player == \"Keldon Johnson\" |\n    Player == \"Kevin Knox\" |\n    Player == \"Trey Lyles\" |\n    Player == \"Tyrese Maxey\" |\n    Player == \"Malik Monk\" |\n    Player == \"Jamal Murray\" |\n    Player == \"Nerlens Noel\" |\n    Player == \"Immanuel Quickley\" |\n    Player == \"Julius Randle\" |\n    Player == \"Nick Richards\" |\n    Player == \"Shaedon Sharpe\" |\n    Player == \"Karl-Anthony Towns\" |\n    Player == \"Jarred Vanderbilt\" |\n    Player == \"John Wall\" |\n    Player == \"TyTy Washington Jr.\" |\n    Player == \"P.J. Washington\")\n\nkybubble <- kynbaadvanced %>% filter(MP>100)\nsga <- kybubble %>% filter(Player == \"Shai Gilgeous-Alexander\")\n\nggplot() +\n  geom_vline(xintercept = 0.8307692, color=\"blue\") +\n  geom_hline(yintercept = -0.06538462 +0.3, color=\"blue\") +\n  geom_point(data=kybubble, aes(x=WS, y=BPM, size=PER), alpha = .3) +\n  scale_size(range = c(3,6)) +\n  geom_text_repel(data=kybubble, aes(x=WS, y=BPM, label=Player), size=2) +\n  geom_encircle(data=sga, aes(x=WS-0.2, y=BPM-0.25), s_shape=.2, expand=.01, colour=\"red\") +\n  geom_text(aes(x=1, y=-5, label=\"Average WS\"), size=3, color=\"blue\") +\n  geom_text(aes(x=0.17, y=0.75, label=\"Average BPM\"), size=3, color=\"blue\") +\n  labs(\n    x=\"Win Shares(WS)\",\n    y=\"Box Plus/Minus(BPM)\",\n    title=\"Shai is the most valuable player \\n compared to other NBA players from Kentucky\",\n    subtitle=\"Shai helps his team to win the most games based off how efficient is team is while he is on the court.\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nThis first chart is a bubble chart looking at Win Shares vs. Box plus or minus and then the size of the bubble gets bigger with a player efficiency rating for each individual player. We are looking at the relationship among these 3 variables as it is favorable to have higher ratings for each one of these stats.\nWin shares means how a player helps their team win games based on offense, defense, and minutes played. Box plus or minus looks at the total score differential while a player is playing. Player efficiency rating or PER is a rating based on a player’s positive and negative accomplishments.\nYou can clearly see that Shai Gilgeous-Alexander has the best win shares and box plus or minus rating. In addition, he has a PER of 25 which is the biggest bubble you can have. Right now, Gilgeous-Alexander looks like the best player with Devin Booker, Anthony Davis, and De’Aaron Fox in the running.\n\n\nCode\nsga36 <- kynba36 %>% filter(Player == \"Shai Gilgeous-Alexander\")\ndf36 <- kynba36 %>% filter(Player == \"De'Aaron Fox\")\ndb36 <- kynba36 %>% filter(Player == \"Devin Booker\")\nad36 <- kynba36 %>% filter(Player == \"Anthony Davis\")\njw36 <- kynba36 %>% filter(Player == \"John Wall\")\n\nkytop5pts <- kynba36 %>% top_n(5, wt=PTS)\nbar1 <- ggplot() +\n  geom_bar(data=kytop5pts, aes(x=reorder(Player, PTS), weight=PTS)) +\n  geom_bar(data=sga36,aes(x=reorder(Player, PTS), weight=PTS), fill=\"#007AC1\") +\n  geom_bar(data=df36,aes(x=reorder(Player, PTS), weight=PTS), fill=\"#5A2D81\") +\n  geom_bar(data=db36,aes(x=reorder(Player, PTS), weight=PTS), fill=\"#E56020\") +\n  geom_bar(data=ad36,aes(x=reorder(Player, PTS), weight=PTS), fill=\"#FDB927\") +\n  coord_flip() +\n  labs(\n    x=\"\",\n    y=\"Points per 36 minutes\",\n    title=\"Shai is the only player who is top 5 in all categories\",\n    subtitle=\"He is a top 5 leader in major stat categories compared to other Kentucky players in the NBA.\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\nkytop5stl <- kynba36 %>% top_n(5, wt=STL)\nbar2 <- ggplot() +\n  geom_bar(data=kytop5stl, aes(x=reorder(Player, STL), weight=STL)) +\n  geom_bar(data=sga36,aes(x=reorder(Player, STL), weight=STL), fill=\"#007AC1\") +\n  geom_bar(data=jw36,aes(x=reorder(Player, STL), weight=STL), fill=\"#C8102E\") +\n  coord_flip() +\n  labs(\n    x=\"\",\n    y=\"Steals per 36 minutes\",\n    title=\"\",\n    subtitle=\"\",\n    caption=\"\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\nkytop5blk <- kynba36 %>% top_n(5, wt=BLK)\nbar3 <- ggplot() +\n  geom_bar(data=kytop5blk, aes(x=reorder(Player, BLK), weight=BLK)) +\n  geom_bar(data=sga36,aes(x=reorder(Player, BLK), weight=BLK), fill=\"#007AC1\") +\n  geom_bar(data=ad36,aes(x=reorder(Player, BLK), weight=BLK), fill=\"#FDB927\") +\n  coord_flip() +\n   labs(\n    x=\"\",\n    y=\"Blocks per 36 minutes\",\n    title=\"\",\n    subtitle=\"\",\n    caption=\"\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\nkytop5ast <- kynba36 %>% top_n(5, wt=AST)\nbar4 <- ggplot() +\n  geom_bar(data=kytop5ast, aes(x=reorder(Player, AST), weight=AST)) +\n  geom_bar(data=sga36,aes(x=reorder(Player, AST), weight=AST), fill=\"#007AC1\") +\n  geom_bar(data=df36,aes(x=reorder(Player, AST), weight=AST), fill=\"#5A2D81\") +\n  geom_bar(data=db36,aes(x=reorder(Player, AST), weight=AST), fill=\"#E56020\") +\n  geom_bar(data=jw36,aes(x=reorder(Player, AST), weight=AST), fill=\"#C8102E\") +\n  coord_flip() +\n   labs(\n    x=\"\",\n    y=\"Assists per 36 minutes\",\n    title=\"\",\n    subtitle=\"\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\nplot_grid(bar1,bar2,bar3,bar4)\n\n\n\n\n\nThis chart is a cowplot of 4 different bar charts of points, steals, blocks, and assists. These may be simple stats to look at, but they are very important and the most talked about statistics. We are looking at these stats on the basis that each player is playing 36 minutes so it’s on an equal scale.\nAs you can see, Shai Gilgeous-Alexander is the only player from Kentucky in every chart. He is a top 5 leader in points, steals, blocks, and assists and no other player from Kentucky is. Once again, Devin Booker, Anthony Davis, and De’Aaron Fox are in two of the four charts, so they are top players from Kentucky this year.\n\n\nCode\ntable <- kynba100 %>%\n  filter(MP/G > 20) %>%\n  mutate(NRtg = ORtg-DRtg) %>%\n  select(Player, NRtg, ORtg, DRtg, PTS) %>%\n  arrange(desc(NRtg))\n\ntable %>% \n  gt() %>%\n  cols_label(\n    Player = \"Player\",\n    PTS = \"Points\",\n    ORtg = \"Offensive Rating\",\n    DRtg = \"Defensive Rating\",\n    NRtg = \"Net Rating\"\n  ) %>%\n  tab_header(\n    title = \"Davis and Shai lead in Net Rating and are top 5 in Points\",\n    subtitle = \"Shai, once again, is a leader in offensive and defensive ratings compared to the other Kentucky players.\") %>%\n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\", size = 24),\n    locations = cells_title(\"title\")\n  ) %>%\n  tab_style(  \n    style = cell_text(color = \"black\", align = \"left\", size = 10),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"Source: Sports Reference | By: Naren Narasimhan\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n  ) %>%\n  opt_row_striping() %>%\n  opt_table_lines(\"none\") %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"#007AC1\"),\n      cell_text(color = \"white\")\n    ),\n    locations = cells_body(\n      rows = Player == \"Shai Gilgeous-Alexander\")\n  )\n\n\n\n\n\n\n  \n    \n      Davis and Shai lead in Net Rating and are top 5 in Points\n    \n    \n      Shai, once again, is a leader in offensive and defensive ratings compared to the other Kentucky players.\n    \n  \n  \n    \n      Player\n      Net Rating\n      Offensive Rating\n      Defensive Rating\n      Points\n    \n  \n  \n    Anthony Davis\n16\n123\n107\n34.6\n    Shai Gilgeous-Alexander\n11\n122\n111\n41.0\n    Jarred Vanderbilt\n11\n119\n108\n15.1\n    Karl-Anthony Towns\n9\n121\n112\n29.3\n    Devin Booker\n8\n121\n113\n37.4\n    De'Aaron Fox\n8\n122\n114\n36.9\n    Shaedon Sharpe\n2\n117\n115\n22.7\n    Malik Monk\n0\n117\n117\n28.3\n    Bam Adebayo\n-1\n108\n109\n26.9\n    Julius Randle\n-1\n112\n113\n30.7\n    Tyler Herro\n-2\n109\n111\n30.8\n    Tyrese Maxey\n-3\n110\n113\n30.9\n    John Wall\n-3\n103\n106\n25.5\n    Immanuel Quickley\n-6\n103\n109\n18.5\n    P.J. Washington\n-9\n106\n115\n23.6\n    Keldon Johnson\n-10\n109\n119\n32.1\n    Jamal Murray\n-13\n103\n116\n27.4\n  \n  \n    \n      Source: Sports Reference | By: Naren Narasimhan\n    \n  \n  \n\n\n\n\nThis table looks at data per 100 possessions so the statistics are weighted equally for every player. I looked at offensive and defensive ratings, and calculated the net rating based off of that. Offensive rating is based on how much a player helps their team get points. Defensive rating is based on how much a player gives up points on defense. A player wants a low defensive rating and a high offensive rating.\nShai Gilgeous-Alexander has the 2nd best net rating and leads in points too, so I would say he is the best NBA player currently from Kentucky. Anthony Davis is a close 2nd and might be the best at the end of the season, but we won’t know till later."
  },
  {
    "objectID": "posts/best-kentucky-player-in-the-nba/Data.html",
    "href": "posts/best-kentucky-player-in-the-nba/Data.html",
    "title": "Naren's sports analysis blogs",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\n\nnba36 <- read_csv(\"NBA36\")\n\nRows: 464 Columns: 30\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Player, Pos, Tm, Player-additional\ndbl (26): Rk, Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, FT, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(nba36)\n\n# A tibble: 6 × 30\n     Rk Player Pos     Age Tm        G    GS    MP    FG   FGA `FG%`  `3P` `3PA`\n  <dbl> <chr>  <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1 Preci… C        23 TOR      12     0   245   5.3  13.5 0.391   0.7   4.1\n2     2 Steve… C        29 MEM      15    15   390   4.1   6.5 0.629   0     0  \n3     3 Bam A… C        25 MIA      14    14   490   7.6  14.4 0.531   0     0.4\n4     4 Ochai… SG       22 UTA       6     0    67   4.3  10.2 0.421   0     3.2\n5     5 Santi… PF       22 MEM      16    14   436   5    10.7 0.465   1.7   5  \n6     6 Nicke… SG       24 UTA       9     0    70   4.6  13.9 0.333   2.1   6.7\n# … with 17 more variables: `3P%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   FT <dbl>, FTA <dbl>, `FT%` <dbl>, ORB <dbl>, DRB <dbl>, TRB <dbl>,\n#   AST <dbl>, STL <dbl>, BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>,\n#   `Player-additional` <chr>\n\n\n\nnbapergame <- read_csv(\"nbapergame\")\n\nRows: 464 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Player, Pos, Tm, Player-additional\ndbl (27): Rk, Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(nbapergame)\n\n# A tibble: 6 × 31\n     Rk Player Pos     Age Tm        G    GS    MP    FG   FGA `FG%`  `3P` `3PA`\n  <dbl> <chr>  <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1 Preci… C        23 TOR      12     0  20.4   3     7.7 0.391   0.4   2.3\n2     2 Steve… C        29 MEM      15    15  26     2.9   4.7 0.629   0     0  \n3     3 Bam A… C        25 MIA      14    14  35     7.4  14   0.531   0     0.4\n4     4 Ochai… SG       22 UTA       6     0  11.2   1.3   3.2 0.421   0     1  \n5     5 Santi… PF       22 MEM      16    14  27.3   3.8   8.1 0.465   1.3   3.8\n6     6 Nicke… SG       24 UTA       9     0   7.8   1     3   0.333   0.4   1.4\n# … with 18 more variables: `3P%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   `eFG%` <dbl>, FT <dbl>, FTA <dbl>, `FT%` <dbl>, ORB <dbl>, DRB <dbl>,\n#   TRB <dbl>, AST <dbl>, STL <dbl>, BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>,\n#   `Player-additional` <chr>\n\n\n\nnba100 <- read_csv(\"nba100\")\n\nNew names:\nRows: 464 Columns: 33\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): Player, Pos, Tm, Player-additional dbl (28): Rk, Age, G, GS, MP, FG, FGA,\nFG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, FT, ... lgl (1): ...30\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...30`\n\n\n\nhead(nba100)\n\n# A tibble: 6 × 33\n     Rk Player Pos     Age Tm        G    GS    MP    FG   FGA `FG%`  `3P` `3PA`\n  <dbl> <chr>  <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1 Preci… C        23 TOR      12     0   245   7.2  18.5 0.391   1     5.6\n2     2 Steve… C        29 MEM      15    15   390   5.5   8.7 0.629   0     0  \n3     3 Bam A… C        25 MIA      14    14   490  10.5  19.8 0.531   0     0.5\n4     4 Ochai… SG       22 UTA       6     0    67   5.7  13.6 0.421   0     4.3\n5     5 Santi… PF       22 MEM      16    14   436   6.7  14.3 0.465   2.3   6.8\n6     6 Nicke… SG       24 UTA       9     0    70   6.1  18.4 0.333   2.7   8.9\n# … with 20 more variables: `3P%` <dbl>, `2P` <dbl>, `2PA` <dbl>, `2P%` <dbl>,\n#   FT <dbl>, FTA <dbl>, `FT%` <dbl>, ORB <dbl>, DRB <dbl>, TRB <dbl>,\n#   AST <dbl>, STL <dbl>, BLK <dbl>, TOV <dbl>, PF <dbl>, PTS <dbl>,\n#   ...30 <lgl>, ORtg <dbl>, DRtg <dbl>, `Player-additional` <chr>\n\n\n\nnbaadvanced <- read_csv(\"nbaadvanced\")\n\nNew names:\nRows: 464 Columns: 30\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): Player, Pos, Tm, Player-additional dbl (24): Rk, Age, G, MP, PER, TS%,\n3PAr, FTr, ORB%, DRB%, TRB%, AST%, STL%,... lgl (2): ...20, ...25\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...20`\n• `` -> `...25`\n\n\n\nhead(nbaadvanced)\n\n# A tibble: 6 × 30\n     Rk Player     Pos     Age Tm        G    MP   PER `TS%` `3PAr`   FTr `ORB%`\n  <dbl> <chr>      <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 Precious … C        23 TOR      12   245  14   0.493  0.304 0.359   10.4\n2     2 Steven Ad… C        29 MEM      15   390  15.4 0.568  0     0.5     19.8\n3     3 Bam Adeba… C        25 MIA      14   490  17.6 0.59   0.026 0.352    7.9\n4     4 Ochai Agb… SG       22 UTA       6    67   6.6 0.453  0.316 0.368    6.5\n5     5 Santi Ald… PF       22 MEM      16   436  14.3 0.566  0.473 0.217    7  \n6     6 Nickeil A… SG       24 UTA       9    70   9   0.445  0.481 0.185    0  \n# … with 18 more variables: `DRB%` <dbl>, `TRB%` <dbl>, `AST%` <dbl>,\n#   `STL%` <dbl>, `BLK%` <dbl>, `TOV%` <dbl>, `USG%` <dbl>, ...20 <lgl>,\n#   OWS <dbl>, DWS <dbl>, WS <dbl>, `WS/48` <dbl>, ...25 <lgl>, OBPM <dbl>,\n#   DBPM <dbl>, BPM <dbl>, VORP <dbl>, `Player-additional` <chr>\n\n\n```"
  },
  {
    "objectID": "posts/nebraska-doesnt-belong-in-big-10/index.html",
    "href": "posts/nebraska-doesnt-belong-in-big-10/index.html",
    "title": "Does Nebraska basketball belong in the Big Ten after hiring Fred Hoiberg?",
    "section": "",
    "text": "Does Nebraska belong in the Big Ten after hiring coach Fred Hoiberg? Hoiberg was a standout coach at Iowa State and had a rough time in the NBA, but everyone thought he was the guy to revive the Huskers basketball program when he got hired in 2019.\nEver since he’s been hired, he has been on the chopping block as Nebraska seems like they have made no improvements in their program. They brought a 5 star guard of Bryce McGowens but that didn’t seem to help that much as the Huskers still seemed like they were in a huge hole.\nEven the transfers didn’t help.\nA new head coach, a 5-star recruit, and multiple transfers couldn’t help Nebraska. What could? Maybe moving into a different conference other than the Big Ten.\n\n\nCode\nlibrary(tidyverse)\nlibrary(zoo)\nlibrary(ggbump)\nlibrary(ggrepel)\nlibrary(ggalt)\n\ncollegebasketball2019 <- read_csv(\"collegebasketball2019\")\ncollegebasketball2020 <- read_csv(\"collegebasketball2020\")\ncollegebasketball2021 <- read_csv(\"collegebasketball2021\")\n\nbigtenbasketball2019 <- collegebasketball2019 %>%\n  mutate(\n    Season = 2019\n  )\nbigtenbasketball2020 <- collegebasketball2020 %>%\n  mutate(\n    Season = 2020\n  )\nbigtenbasketball2021 <- collegebasketball2021 %>%\n  mutate(\n    Season = 2021\n  )\n\nallmydata <- bind_rows(bigtenbasketball2019, bigtenbasketball2020, bigtenbasketball2021)\n\nbigtenbasketball <- allmydata %>%\n  rename(\n    totalwins = W...4,\n    totalloses = L...5,\n    conferencewins = W...7,\n    conferenceloses = L...8,\n    homewins = W...9,\n    homeloses = L...10,\n    awaywins = W...11,\n    awayloses = L...12,\n    teampointspergame = PTS...35,\n    opponentpointspergame = PTS...36\n      )\n\nnu <- bigtenbasketball %>% filter(School == \"Nebraska\")\nil <- bigtenbasketball %>% filter(School == \"Illinois\")\niw <- bigtenbasketball %>% filter(School == \"Iowa\")\nnu2021 <- bigtenbasketball %>% filter(School == \"Nebraska\" & Season == 2021)\nnu2019 <- bigtenbasketball %>% filter(School == \"Nebraska\" & Season == 2019)\nil2021 <- bigtenbasketball %>% filter(School == \"Illinois\" & Season == 2021)\nil2019 <- bigtenbasketball %>% filter(School == \"Illinois\" & Season == 2019)\n\nggplot() +\n  geom_line(data=bigtenbasketball, aes(x=Season, y=Rk, group=School), color=\"grey\") +\n  geom_point(data=bigtenbasketball, aes(x=Season, y=Rk, group=School), color=\"grey\") +\n  geom_line(data=nu, aes(x=Season, y=Rk, group=School), color=\"red\") +\n  geom_point(data=nu, aes(x=Season, y=Rk, group=School), color=\"red\") +\n  geom_line(data=il, aes(x=Season, y=Rk, group=School), color=\"orange\") +\n  geom_point(data=il, aes(x=Season, y=Rk, group=School), color=\"orange\") +\n  geom_text(data=nu2021, aes(x=Season + 0.3, y=Rk, label=School)) +\n  geom_text(data=nu2019, aes(x=Season-0.3, y=Rk, label=School)) +\n  geom_text(data=il2021, aes(x=Season + 0.2, y=Rk, label=School)) +\n  geom_text(data=il2019, aes(x=Season - 0.2, y=Rk, label=School)) +\n  scale_x_continuous(breaks=c(2019, 2021), limits=c(2018.5,2021.5)) +\n  scale_y_reverse(breaks=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14)) +\n  labs(\n    x=\"\",\n    y=\"Big Ten Ranking\",\n    title=\"Nebraska is consistenly last, and Illinois is still staying on top\",\n    subtitle=\"Almsot all the other teams improved in their ranking from past seasons, except the Huskers.\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\"\n  )  +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nEvery year that Hoiberg has coached has resulted in Nebraska ranking last in the Big Ten. Not only does the Huskers consistently have losing seasons, but there is no sign of improvement at all compared to the other Big Ten Teams. Almost all the other teams have made some improvement in Big Ten rankings, but the Huskers have not at all.\n\n\nCode\n bubble <- bigtenbasketball %>%\n  group_by(School) %>%\n  summarise(\n    averageSRS = mean(SRS),\n    averageSOS = mean(SOS),\n    Wins = sum(totalwins)\n  )\n\nne <- bubble %>% filter(School == \"Nebraska\")\n\nggplot() +\n  geom_point(\n    data=bubble, aes(x=averageSRS,y=averageSOS, size=Wins),\n    color=\"grey\") +\n  geom_point(\n    data=ne, aes(x=averageSRS,y=averageSOS, size=Wins),\n    color=\"red\") +\n  geom_vline(xintercept = 13.98262) +\n  geom_hline(yintercept = 10,32548) +\n  geom_text_repel(\n    data=bubble,\n    aes(x=averageSRS, y=averageSOS, label=School), size=3) +\n  geom_encircle(data=ne, aes(x=averageSRS+.9, y=averageSOS), s_shape=.01, expand=.000001, colour=\"red\") +\n  geom_text(aes(x=4.5, y=9.8, label=\"Average SOS\"), size=3, color=\"blue\") +\n   geom_text(aes(x=15.3, y=8, label=\"Average SRS\"), size=3, color=\"blue\") +\n  labs(\n    x=\"Simple Rating System\",\n    y=\"Strength Of Schedule\",\n    title=\"Nebraska can't win games with Hoiberg\",\n    subtitle=\"Even though they have an above average strength of schedule, they still have a poor rating and can't win.\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nYou could say Nebraska doesn’t win a lot of games because of their competition in the Big Ten and their strength of schedule. However, all Big Ten teams have had similar strength of schedules or harder for the last three years so this argument is irrelevant. The Huskers also have the worst simple rating system in the Big Ten by far compared to the other teams.\nA simple rating system is a rating based on average point differential and strength of schedule. In essence, this means that Nebraska plays horrible compared to bad and good teams in general.\n\n\nCode\nstack <- bigtenbasketball %>%\n  group_by(School) %>%\n  summarise(\n    fieldgoalpercent = mean(`FG%`)*100,\n    efficientfieldgoalpercent = mean(`eFG%`)*100\n  )\n\nstacked <- stack %>%\n  select(\n    School, fieldgoalpercent, efficientfieldgoalpercent\n  )\n\nstackedwide <- stacked %>%\n  pivot_longer(\n    cols=c(\"fieldgoalpercent\", \"efficientfieldgoalpercent\"),\n    names_to=\"Type\",\n    values_to=\"percent\")\n\nggplot() +\n  geom_bar(data=stackedwide, aes(x=reorder(School, percent), weight=percent, fill=Type)) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"red\", \"orange\"), labels=c(\"Efficient field goal%\", \"Field goal%\")) +\n  labs(\n    x=\"\",\n    y=\"Percentage\",\n    title=\"Hoiberg's famed shooting offense doesn't work for Nebraska\",\n    subtitle=\"The Huskers have one of the worst overall shooting percentages in the Big Ten for the last three years.\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nEveryone knows coach Hoiberg for his fast-paced offense and that’s what he planned to bring to the Huskers. It worked well at Iowa State, but it completely flopped in the NBA. There was high hope for this offense because Hoiberg was back in the college basketball scene, but there is little optimism now.\nNebraska ranks 2nd to last in the Big Ten for the last 3 years for field goal percentage and efficient field goal percentage. Not only have the Huskers been losing games, but they can’t even make any shots to go with that. Maybe Hoiberg should start spending some time recruiting a 7’0” center for the first time in his life.\n\n\nCode\ndumbell <- bigtenbasketball %>%\n  group_by(School) %>%\n  summarise(\n    offensiverating = mean(ORtg),\n    defensiverating = mean(DRtg)\n  )\n\nggplot() +\n  geom_dumbbell(\n    data=dumbell, aes(y=reorder(School, offensiverating), x=offensiverating, xend=defensiverating),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\nlabs(\n    x=\"Offensive Rating (Green) vs. Defensive Rating (Red)\",\n    y=\"\",\n    title=\"The Huskers have the worst offensive and defensive rating\",\n    subtitle=\"Nebraska and Northwestern are the only teams that have their offensive and defensive ratings inverted.\",\n    caption=\"Source: Sports Reference | By: Naren Narasimhan\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8),\n    plot.subtitle = element_text(size=10),\n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nLastly, Nebraska has the worst offensive and defensive ratings in the Big Ten by far in the last 3 years. Offensive efficiency means how efficient a team is at producing points for their team. Defensive efficiency is the complete opposite where it shows how efficient your team is at not letting your opponent score. You want a higher offensive efficiency and a lower defensive efficiency.\nNebraska and Northwestern are the only Big Ten Teams with a lower offensive efficiency than defensive, which results in a negative net efficiency.\nClearly, the Huskers have some work to do if they want to compete in the Big Ten. Obviously, kicking them out of the Big Ten is not realistic so what can they do?\nA new coach and new offense hasn’t been working. A 5 star freshman also didn’t make a difference.\nWhat dramatic change can the Huskers make to revive this basketball team?"
  },
  {
    "objectID": "posts/college-basketball-bracket-failure/index.html",
    "href": "posts/college-basketball-bracket-failure/index.html",
    "title": "College basketball bracket failure",
    "section": "",
    "text": "I thought I knew a lot about college basketball, and I thought I had the perfect model. In short amount of time into the 2023 NCAA tournament, I realized that any model is doubtful to predicting a good bracket.\nI usually pick my brackets based off of looking at some teams stats and my analysis of watching teams play. If I like a team for some reason, usually they will go further in the tournament than other teams in my bracket However, my analysis is always wrong and I never (even close) end up with a perfect bracket.\nThis year in my SPMC460 Advanced Sports Data Analysis class, we did a project to use machine learning to get me a better bracket. The class is about the use of machine learning in sports, and so we used classification algorithms to decide a simple win or lose designation.\nI further explain below the logic and code I used to fill out my bracket. It explains what went wrong with my model or what didn’t. Sometimes you can’t predict Fairleigh Dickinson beating Purdue.\nDid I get a perfect bracket?\nAbsolutely not. But me guessing probably would have led to the same results, if not worse.\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(ggrepel)\nlibrary(gt)\n\nset.seed(1234)\n\nteamgames <- load_mbb_team_box(2015:2023)\nteamplayers <- load_mbb_player_box(2015:2023)\n\nteamstats <- teamgames %>%\n  filter(game_date < as.Date(\"2023-03-14\")) %>%\n  mutate(\n    possessions = round(field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted), digits = 0),\n    ppp = (team_score/possessions)*100,\n    cumulative_ppp = cummean(ppp),\n    effective_field_goal_percentage = ((field_goals_made + (0.5 * three_point_field_goals_made) / field_goals_attempted) * 100) \n    ) %>%\n  filter(possessions <= 90 & possessions >= 53)\n\nplayervalues <- teamplayers %>%\n  filter(minutes > 0) %>%\n  mutate(\n    value = points + rebounds + steals + blocks - turnovers - (field_goals_attempted-field_goals_made) - (free_throws_attempted-free_throws_made)\n  ) %>%\n  group_by(game_id) %>%\n  summarize(\n    team_median_player_value = median(value),\n    team_average_player_value = mean(value)\n  )\n\nteamstats <- teamstats %>% inner_join(playervalues)\n\nrollingteamstats <- teamstats %>%\n  group_by(team_short_display_name, season) %>%\n  arrange(game_date) %>%\n  mutate(\n     team_score = free_throws_made + ((field_goals_made - three_point_field_goals_made)*2) + (three_point_field_goals_made*3),\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_median_value = rollmean(lag(team_median_player_value, n=1), k=10, align=\"right\", fill=NA),\n    team_cumulative_ppp = lag(cummean(ppp), n=1),\n    team_cumulative_player_value = lag(cummean(team_median_player_value), n=1), \n    team_rolling_rebounds = rollmean(lag(total_rebounds, n=1), k=5, align=\"right\", fill=NA),\n    team_effective_field_goal_percentage = lag(((field_goals_made + (0.5 * three_point_field_goals_made) / field_goals_attempted) * 100), n=1)\n  ) %>%\n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id,\n    team_short_display_name,\n    opponent_team_id,\n    game_date,\n    season,\n    team_score,\n    team_rolling_ppp,\n    team_rolling_median_value,\n    team_cumulative_ppp,\n    team_cumulative_player_value,\n    team_effective_field_goal_percentage,\n    offensive_rebounds,\n    defensive_rebounds,\n    possessions\n    ) %>%\n  rename(\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds,\n    team_possessions = possessions\n  )\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>%\n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_median_value = team_rolling_median_value,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_cumulative_player_value = team_cumulative_player_value,\n    opponent_effective_field_goal_percentage = team_effective_field_goal_percentage,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds,\n    opponent_possessions = team_possessions \n  ) \n\ngames <- team_side %>% inner_join(opponent_side)\n\nteamdefensiveefficiency <- games %>% \n  arrange(game_date) %>% \n  group_by(team_short_display_name, season) %>% \n  mutate(\n    team_rolling_defensive_ppp = rollmean(lag((opponent_score/opponent_possessions)*100, n=1), k=15, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, team_short_display_name, team_rolling_defensive_ppp)\n\nopponentdefensiveefficiency <- games %>% \n  arrange(game_date) %>% \n  group_by(opponent_short_display_name, season) %>% \n  mutate(\n    opponent_rolling_defensive_ppp = rollmean(lag((team_score/team_possessions)*100, n=1), k=15, align=\"right\", fill=NA)\n    ) %>%\n  ungroup() %>%\n  select(game_id, opponent_short_display_name, opponent_rolling_defensive_ppp)\n\ngames <- games %>% inner_join(teamdefensiveefficiency)\ngames <- games %>% inner_join(opponentdefensiveefficiency)\n\ngames <- games %>%\n  mutate(\n    team_result = as.factor(case_when(\n      team_score > opponent_score ~ \"W\",\n      opponent_score > team_score ~ \"L\"\n)),\nteam_offensive_rebound_factor = team_offensive_rebounds / (team_offensive_rebounds + opponent_defensive_rebounds),\nopponent_offensive_rebound_factor = opponent_offensive_rebounds / (opponent_offensive_rebounds + team_defensive_rebounds),\nteam_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_offensive_rebound_factor = rollmean(lag(opponent_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\n\nteam_defensive_rebound_factor = team_defensive_rebounds / (team_defensive_rebounds + opponent_offensive_rebounds),\nopponent_defensive_rebound_factor = opponent_defensive_rebounds / (opponent_defensive_rebounds + team_offensive_rebounds),\nteam_rolling_defensive_rebound_factor = rollmean(lag(team_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_defensive_rebound_factor = rollmean(lag(opponent_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA)\n) \n\nmodelgames <- games %>%\n  select(\n    game_id,\n    game_date,\n    team_short_display_name,\n    opponent_short_display_name,\n    season,\n    team_rolling_ppp,\n    opponent_rolling_ppp,\n    team_rolling_defensive_ppp, \n    opponent_rolling_defensive_ppp,\n   #  team_rolling_median_value,\n   #  opponent_rolling_median_value,\n   #  team_cumulative_ppp,\n   #  opponent_cumulative_ppp,\n    team_cumulative_player_value,\n    opponent_cumulative_player_value,\n  #  team_effective_field_goal_percentage,\n  #  opponent_effective_field_goal_percentage,\n    team_rolling_offensive_rebound_factor,\n    opponent_rolling_offensive_rebound_factor,\n    team_rolling_defensive_rebound_factor,\n    opponent_rolling_defensive_rebound_factor,\n    team_result\n  ) %>% na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\ngame_recipe <-\n  recipe(team_result ~ ., data = game_train) %>%\n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\")\n\nsvm_mod <- \n  svm_poly() %>%\n  set_engine(\"kernlab\") %>%\n  set_mode(\"classification\") \n\nsvm_workflow <- \n  workflow() %>% \n  add_model(svm_mod) %>% \n  add_recipe(game_recipe)\n\nsvm_fit <- \n  svm_workflow %>% \n  fit(data = game_train)\n\n\n Setting default kernel parameters  \n\n\nCode\nfirst4games <- tibble(\n  team_short_display_name=\"SE Missouri St\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Texas Southern\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Arizona St\",\n  opponent_short_display_name=\"Nevada\"\n)\n\nfirst4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(first4games)\n\nfirst4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(first4games) \n\nfirst4 <- svm_fit %>% \n  predict(new_data = first4games) %>%\n  bind_cols(first4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nfirst4 <- svm_fit %>% \n  predict(new_data = first4games, type=\"prob\") %>%\n  bind_cols(first4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround1games)\n\nmidwestround1games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(midwestround1games) \n\nmidwestround1 <- svm_fit %>% \n  predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nmidwestround1 <- svm_fit %>% \n  predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround2games)\n\nmidwestround2games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(midwestround2games) \n\nmidwestround2 <- svm_fit %>% \n  predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nmidwestround2 <- svm_fit %>% \n  predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround3games)\n\nmidwestround3games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(midwestround3games)\n\nmidwestround3 <- svm_fit %>% \n  predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nmidwestround3 <- svm_fit %>% \n  predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround4games)\n\nmidwestround4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(midwestround4games) \n\nmidwestround4 <- svm_fit %>% \n  predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nmidwestround4 <- svm_fit %>% \n  predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround1games)\n\nsouthround1games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(southround1games) \n\nsouthround1 <- svm_fit %>% \n  predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nsouthround1 <- svm_fit %>% \n  predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Maryland\"\n) %>% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround2games)\n\nsouthround2games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(southround2games) \n\nsouthround2 <- svm_fit %>% \n  predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nsouthround2 <- svm_fit %>% \n  predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Arizona\"\n)\n\nsouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround3games)\n\nsouthround3games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(southround3games)\n\nsouthround3 <- svm_fit %>% \n  predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nsouthround3 <- svm_fit %>% \n  predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Creighton\"\n)\n\nsouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround4games)\n\nsouthround4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(southround4games) \n\nsouthround4 <- svm_fit %>% \n  predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nsouthround4 <- svm_fit %>% \n  predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround1games)\n\neastround1games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(eastround1games) \n\neastround1 <- svm_fit %>% \n  predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\neastround1 <- svm_fit %>% \n  predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Tennessee\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround2games)\n\neastround2games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(eastround2games) \n\neastround2 <- svm_fit %>% \n  predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\neastround2 <- svm_fit %>% \n  predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround3games <- tibble(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround3games)\n\neastround3games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(eastround3games)\n\neastround3 <- svm_fit %>% \n  predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\neastround3 <- svm_fit %>% \n  predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround4games <- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround4games)\n\neastround4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(eastround4games) \n\neastround4 <- svm_fit %>% \n  predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\neastround4 <- svm_fit %>% \n  predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona St\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround1games)\n\nwestround1games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(westround1games) \n\nwestround1 <- svm_fit %>% \n  predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nwestround1 <- svm_fit %>% \n  predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2games <- tibble(\n  team_short_display_name=\"Howard\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UCLA\"\n) \n\nwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround2games)\n\nwestround2games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(westround2games) \n\nwestround2 <- svm_fit %>% \n  predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nwestround2 <- svm_fit %>% \n  predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3games <- tibble(\n  team_short_display_name=\"Howard\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UCLA\"\n)\n\nwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround3games)\n\nwestround3games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(westround3games)\n\nwestround3 <- svm_fit %>% \n  predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nwestround3 <- svm_fit %>% \n  predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4games <- tibble(\n  team_short_display_name=\"Iona\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround4games)\n\nwestround4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(westround4games) \n\nwestround4 <- svm_fit %>% \n  predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nwestround4 <- svm_fit %>% \n  predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinal4games <- tibble(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Vermont\"\n) %>% add_row(\n  team_short_display_name=\"Colgate\",\n  opponent_short_display_name=\"Iona\"\n)\n\nfinal4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(final4games)\n\nfinal4games <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(final4games) \n\nfinal4 <- svm_fit %>% \n  predict(new_data = final4games) %>%\n  bind_cols(final4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nfinal4 <- svm_fit %>% \n  predict(new_data = final4games, type=\"prob\") %>%\n  bind_cols(final4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nchampgames <- tibble(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Iona\"\n) \n\nchampgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(champgames)\n\nchampgames <- modelgames %>%\n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>%\n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>%\n  right_join(champgames) \n\nchamp <- svm_fit %>% \n  predict(new_data = champgames) %>%\n  bind_cols(champgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\nchamp <- svm_fit %>% \n  predict(new_data = champgames, type=\"prob\") %>%\n  bind_cols(champ) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nIn the run up to the tournament, I used a support vector machine algorithm but tried other ones like a logistic regression and lightgbm algorithm. The support vector machine was the best and most robust one, so I stuck with that one.\nIn training my data, my model was predicting college basketball games correctly about 65 percent of the time.\n\n\nCode\nsvmtrainpredict <- svm_fit %>% predict(new_data = game_train) %>%\n  bind_cols(game_train) \n\nmetrics(svmtrainpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.657\n2 kap      binary         0.313\n\n\nHow about against data my model hasn’t seen yet? This what really matters because this is the accuracy to see how robust the NCAA model will be. The testing model is about 64%, so basically the same. This means the model is robust and very effective and consistent to predicting games. It also has a better chance than me (50%) to predict games.\n\n\nCode\nsvmtestpredict <- svm_fit %>% predict(new_data = game_test) %>%\n  bind_cols(game_test)\nmetrics(svmtestpredict, team_result, .pred_class)\n\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.643\n2 kap      binary         0.286\n\n\nTo finalize my predictors, I calculated lots of metrics but I only used the ones I thought were most effective for predicting wins in my model.\nThe first predictors in my model are offensive ppp and defensive ppp. This is the offensive and defensive efficiency for a team. The next predictor I looked at was cumulative player value. I did this by calculating the median player value for each player on a team and made my own statistic for “value”. The last predictor I used in my model was an offensive and defensive rebound factor. Rebounding is a crucial factor in predicting college basketball wins so that’s why I included it.\n\n\nCode\nsummary(game_recipe) %>%\n  select(variable, role) %>% \n  filter(role != \"ID\") %>%\n  gt() %>%\n  tab_header(\n    title = \"Model predictors\",\n    subtitle = \"Efficiencies, player values, and rebounding\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Naren Narasimhan\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Model predictors\n    \n    \n      Efficiencies, player values, and rebounding\n    \n  \n  \n    \n      variable\n      role\n    \n  \n  \n    team_rolling_ppp\npredictor\n    opponent_rolling_ppp\npredictor\n    team_rolling_defensive_ppp\npredictor\n    opponent_rolling_defensive_ppp\npredictor\n    team_cumulative_player_value\npredictor\n    opponent_cumulative_player_value\npredictor\n    team_rolling_offensive_rebound_factor\npredictor\n    opponent_rolling_offensive_rebound_factor\npredictor\n    team_rolling_defensive_rebound_factor\npredictor\n    opponent_rolling_defensive_rebound_factor\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Naren Narasimhan\n    \n  \n  \n\n\n\n\nHow did I do? I did not get lucky and my model did not help me to get more lucky.\nMy final four consisted only of 12+ seeds and there were huge upsets everywhere. Kansas was supposed to lose to Howard. Colgate over Texas. Vermont over Marquette. And those were just from round 1 only.\nIf I wanted to talk about all of my horrible predictions of my model, it would take forever. Because of that, I’ll just show you one singular round from a region displaying my failure.\nHere’s what my model predicted in the West Region for round 1:\n\n\nCode\nwestround1 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"West Region: Round 1\",\n    subtitle = \"I was totally sure Howard would beat Jalen Wilson and KU.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Naren Narasimhan\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      West Region: Round 1\n    \n    \n      I was totally sure Howard would beat Jalen Wilson and KU.\n    \n  \n  \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    UCLA\nW\n54.5%\nUNC Asheville\n    Arkansas\nW\n60.5%\nIllinois\n    Northwestern\nL\n44.7%\nBoise St\n    TCU\nL\n49.1%\nArizona St\n    Gonzaga\nW\n72.1%\nGrand Canyon\n    UConn\nL\n34.1%\nIona\n    Kansas\nL\n38.2%\nHoward\n    Saint Mary's\nL\n40.1%\nVCU\n  \n  \n    \n      By: Naren Narasimhan\n    \n  \n  \n\n\n\n\nFrom this graph looking at the the relationship of offensive and defensive efficiency, you can see how good of a predictor it was for the first round in the Midwest region. Most of it was predicted right, but there were some alarming predictions.\nBased off this, Houston and Texas A&M should have lost their games based off of their below average efficiency but my model predicted both teams to still win. This is why I added more predictors and to not just rely on efficiency statistics.\n\n\nCode\nggplot() +\n  geom_point(data = modelgames, aes(x= team_rolling_ppp, y= opponent_rolling_ppp, color=team_result), alpha=.05) +\n  geom_point(data = midwestround1, aes(x= team_rolling_ppp, y= opponent_rolling_ppp, color= .pred_class), size=3) +\n   geom_smooth(data = modelgames, aes(x= team_rolling_ppp, y= opponent_rolling_ppp), method = \"lm\") +\n  geom_text_repel(data = midwestround1, aes(x= team_rolling_ppp, y= opponent_rolling_ppp, label=team_short_display_name), size = 3) +\n   labs(\n    x=\"team offensive efficiency\", \n    y=\"opponent offensive efficiency\", \n    title=\"How a team's efficiency lined up with their result\", \n    subtitle=\"This looked at all the games played in round 1 of the Midwest region compared to all college games\", \n    caption=\"Source: HoopR | By: Naren Narasimhan\"\n    ) +\ntheme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nRebounding. We know how important it is, especially in March Madness. A last second offensive rebound to add another possession can help your team win the game.\nWe’ll see how important it was to predicting wins for round 1 in the South region. You can see how not important offensive rebounding was to winning games.\nAlabama and Arizona were both still predicted to win even if their offensive rebounding was not as good as their opponent. On the opposite spectrum, Baylor still was predicted to lose as a #3 seed even when their offensive rebounding was better than their opponent.\n\n\nCode\nggplot() +\n  geom_point(data = modelgames, aes(x= team_rolling_offensive_rebound_factor, y= opponent_rolling_offensive_rebound_factor, color=team_result), alpha=.05) +\n  geom_point(data = southround1, aes(x= team_rolling_offensive_rebound_factor , y= opponent_rolling_offensive_rebound_factor, color= .pred_class), size=3)+\n  geom_smooth(data = modelgames, aes(x= team_rolling_offensive_rebound_factor, y= opponent_rolling_offensive_rebound_factor), method = \"lm\") +\n  geom_text_repel(data = southround1, aes(x= team_rolling_offensive_rebound_factor , y= opponent_rolling_offensive_rebound_factor, label=team_short_display_name), size = 3) +\n   labs(\n    x=\"team offensive rebounding\", \n    y=\"opponent offensive rebounding\", \n    title=\"Offensive rebounding predicting team result\", \n    subtitle=\"This looked at all the games played in round 1 of the South region compared to all college games\", \n    caption=\"Source: HoopR | By: Naren Narasimhan\"\n    ) +\ntheme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nHow did it all end up?\nHere’s some pictures of my final results from the ESPN bracket challenge. I really thought machine learning and this advanced sports analysis class would help me get a perfect bracket.\nSurprisingly, my bracket was in the 32 percentile and ranked 13.7M across the whole country. Till next year.\nThe code I wrote to make this relied heavily on hoopR and tidymodels.\n\n\n\nThis a picture of my South regional bracket prediction.\n\n\n\n\n\nThis is a picture of my Midwest regional bracket prediction.\n\n\n\n\n\nThis is a picture of my East regional bracket prediction.\n\n\n\n\n\nThis is a picture of my West regional bracket prediction.\n\n\n\n\n\nThis is a picture of my Final Four bracket prediction."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "",
    "text": "With the NFL draft done, the fantasy season and scouting is upon us. Who should you pick? You probably have your first five rounds down and who’s on your list, but you haven’t figured out your flex or bench options.\nRookies play a huge part in fantasy football and can be very risky since they have no previous NFL fantasy data for them. They are important players to consider picking in later rounds, but which ones should you pick? Receivers are a huge part of your roster, so we will only focus on that position only.\nI have created a machine learning model that predicts fantasy points for all the incoming wide receivers that just got drafted. I did this by focusing on a few specific college and drafts stats. I included what overall pick they were drafted because NFL teams have scouted these players already and pick the better ones first. In addition, I included total touchdowns from their college career as I valued this as the biggest receiving stat to include in my model. Lastly, I added the player’s team rating in college because better teams will produce better receivers.\nBelow is the different methods of running my model and finalizing my predictors for fantasy points. I compared lightgbm and xg boost methods to decide which one would be better.\nNow, I will calculate the metrics of my training data for xg boost, where my model can see old data. It also shows the r-squared value, which is the percent that Fantasy points can be predicted by my inputs. It also displays the root mean square error, which is the average amount of percent error my model will have.\nHere are the metrics for lightgbm.\nIt doesn’t matter if you are running your model based on training data, so we will calculate the metrics of our testing data starting with lightgbm.\nNow xg boost testing metrics.\nI decided to go with xg boost becuase it was more robust than lightgbm, as the training and testing data were closer.\nAnother factor that made me choose my predictors was multicollinearity. These three factors were the best predictors for my model because they predicted Fantasy points well and didn’t highly correlate with each other.\nThis is my final prediction with the current rookies and displaying the top 5 based off Fantasy points in a table."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html#jordan-addison-usc",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html#jordan-addison-usc",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "1. Jordan Addison, USC",
    "text": "1. Jordan Addison, USC\nJordan Addison had the most receptions of 212 and tied first for the most touchdowns of 29 in his draft class. You can compare him to New York Giants receiver, Darius Slayton, who also had 82 fantasy points last season."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html#quentin-johnston-tcu",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html#quentin-johnston-tcu",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "2. Quentin Johnston, TCU",
    "text": "2. Quentin Johnston, TCU\nQuentin Johnston had an impressive senior season that bumped his draft stock high even though his career receiving stats were average. He played on a very high rated TCU team that made the national championship this past season. You can compare him to Devin Duvernay, who is a Baltimore Ravens wide receiver with 79 fantasy points last year."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html#jaxon-smith-njigba-osu",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html#jaxon-smith-njigba-osu",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "3. Jaxon Smith-Njigba, OSU",
    "text": "3. Jaxon Smith-Njigba, OSU\nNjigba was the first receiver in his class to get off the draft board. He had one of the worst career receiving stats in his draft class but when he played he was magnificent. If my model accounted for touchdowns per game, Njigba would probably be number one. You can compare him to New York Giants receiver, Richie James, who also had 82 fantasy points last season."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html#zay-flowers-bc",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html#zay-flowers-bc",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "4. Zay Flowers, BC",
    "text": "4. Zay Flowers, BC\nZay Flowers is an explosive wide receiver with amazing receiving stats on a horrible team. He had 200 receptions, more than 3,000 receiving yards, and 29 touchdowns over his career. His comparison is to Chris Moore of the Houston Texans who scored 67 fantasy points."
  },
  {
    "objectID": "posts/top-five-wide-receivers-you-should-pick/index.html#jonathan-mingo-ole-miss",
    "href": "posts/top-five-wide-receivers-you-should-pick/index.html#jonathan-mingo-ole-miss",
    "title": "Which top five rookie wide receivers should be on your fantasy board?",
    "section": "5. Jonathan Mingo, Ole Miss",
    "text": "5. Jonathan Mingo, Ole Miss\nMingo is the last on my list and the only one in my list taken in the second round. His receiving stats are average, but his predicted fantasy points are still higher than most of his class since he got drafted early. You can compare him to veteran declining wide receiver Robert Woods of the Tennessee Titans, who had 63 fantasy points last season."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest posts",
    "section": "",
    "text": "Which top five rookie wide receivers should be on your fantasy board?\n\n\n\n\n\n\n\nFantasy\n\n\ncode\n\n\nrookies\n\n\n\n\n\n\n\n\n\n\n\nMay 10, 2023\n\n\nNaren Narasimhan\n\n\n\n\n\n\n  \n\n\n\n\nCollege basketball bracket failure\n\n\n\n\n\n\n\nmachinelearning\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2023\n\n\nNaren Narasimhan\n\n\n\n\n\n\n  \n\n\n\n\nWho is the best NBA basketball player from Kentucky right now?\n\n\n\n\n\n\n\nKentucky\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2022\n\n\nNaren Narasimhan\n\n\n\n\n\n\n  \n\n\n\n\nDoes Nebraska basketball belong in the Big Ten after hiring Fred Hoiberg?\n\n\n\n\n\n\n\nhuskers\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2022\n\n\nNaren Narasimhan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]